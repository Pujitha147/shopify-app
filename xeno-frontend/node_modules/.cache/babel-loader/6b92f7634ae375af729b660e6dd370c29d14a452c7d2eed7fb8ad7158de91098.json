{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adike\\\\Downloads\\\\xeno_assignment\\\\xeno-frontend\\\\src\\\\pages\\\\Orders.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport api from \"../services/api\"; // Assuming services/api.js is correct\nimport Table from \"../components/Table\"; // Reusing your Table component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Orders = () => {\n  _s();\n  const [orders, setOrders] = useState([]);\n  useEffect(() => {\n    async function fetchOrders() {\n      try {\n        const res = await api.get(\"/orders\"); // Fetch orders using the updated API service\n        setOrders(res.data); // Set the fetched orders into the state\n      } catch (err) {\n        console.error(\"Failed to fetch orders:\", err); // Log any errors\n      }\n    }\n    fetchOrders(); // Call the function to fetch orders when the component mounts\n  }, []); // Empty dependency array ensures this effect runs only once\n\n  // Prepare the data to be displayed in the table\n  const columns = [\"Order ID\", \"Customer ID\", \"Total Price\", \"Date\"];\n  const data = orders.map(order => [order.shopify_order_id, order.customer_id || \"N/A\",\n  // Display \"N/A\" if no customer_id\n  `₹${order.total_price}`,\n  // Format the total price with ₹ symbol\n  new Date(order.createdAt).toLocaleDateString(\"en-GB\") // Format the createdAt date\n  ]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"mb-4 fw-bold\",\n      children: \"Orders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-responsive\",\n      children: [/*#__PURE__*/_jsxDEV(Table, {\n        columns: columns,\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), \"  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(Orders, \"FvMuVccH6DXI6fqfhJiN/VsjZaw=\");\n_c = Orders;\nexport default Orders;\nvar _c;\n$RefreshReg$(_c, \"Orders\");","map":{"version":3,"names":["React","useEffect","useState","api","Table","jsxDEV","_jsxDEV","Orders","_s","orders","setOrders","fetchOrders","res","get","data","err","console","error","columns","map","order","shopify_order_id","customer_id","total_price","Date","createdAt","toLocaleDateString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/adike/Downloads/xeno_assignment/xeno-frontend/src/pages/Orders.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport api from \"../services/api\"; // Assuming services/api.js is correct\r\nimport Table from \"../components/Table\"; // Reusing your Table component\r\n\r\nconst Orders = () => {\r\n  const [orders, setOrders] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchOrders() {\r\n      try {\r\n        const res = await api.get(\"/orders\");  // Fetch orders using the updated API service\r\n        setOrders(res.data);  // Set the fetched orders into the state\r\n      } catch (err) {\r\n        console.error(\"Failed to fetch orders:\", err);  // Log any errors\r\n      }\r\n    }\r\n\r\n    fetchOrders();  // Call the function to fetch orders when the component mounts\r\n  }, []);  // Empty dependency array ensures this effect runs only once\r\n\r\n  // Prepare the data to be displayed in the table\r\n  const columns = [\"Order ID\", \"Customer ID\", \"Total Price\", \"Date\"];\r\n  const data = orders.map((order) => [\r\n    order.shopify_order_id,\r\n    order.customer_id || \"N/A\",  // Display \"N/A\" if no customer_id\r\n    `₹${order.total_price}`,     // Format the total price with ₹ symbol\r\n    new Date(order.createdAt).toLocaleDateString(\"en-GB\"), // Format the createdAt date\r\n  ]);\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h1 className=\"mb-4 fw-bold\">Orders</h1>\r\n      <div className=\"table-responsive\">\r\n        <Table columns={columns} data={data} />  {/* Reusing your Table component */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Orders;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,iBAAiB,CAAC,CAAC;AACnC,OAAOC,KAAK,MAAM,qBAAqB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,eAAeU,WAAWA,CAAA,EAAG;MAC3B,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMT,GAAG,CAACU,GAAG,CAAC,SAAS,CAAC,CAAC,CAAE;QACvCH,SAAS,CAACE,GAAG,CAACE,IAAI,CAAC,CAAC,CAAE;MACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC,CAAC,CAAE;MAClD;IACF;IAEAJ,WAAW,CAAC,CAAC,CAAC,CAAE;EAClB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAE;;EAET;EACA,MAAMO,OAAO,GAAG,CAAC,UAAU,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,CAAC;EAClE,MAAMJ,IAAI,GAAGL,MAAM,CAACU,GAAG,CAAEC,KAAK,IAAK,CACjCA,KAAK,CAACC,gBAAgB,EACtBD,KAAK,CAACE,WAAW,IAAI,KAAK;EAAG;EAC7B,IAAIF,KAAK,CAACG,WAAW,EAAE;EAAM;EAC7B,IAAIC,IAAI,CAACJ,KAAK,CAACK,SAAS,CAAC,CAACC,kBAAkB,CAAC,OAAO,CAAC,CAAE;EAAA,CACxD,CAAC;EAEF,oBACEpB,OAAA;IAAKqB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBtB,OAAA;MAAIqB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxC1B,OAAA;MAAKqB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BtB,OAAA,CAACF,KAAK;QAACc,OAAO,EAAEA,OAAQ;QAACJ,IAAI,EAAEA;MAAK;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,MAAE;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACxB,EAAA,CAjCID,MAAM;AAAA0B,EAAA,GAAN1B,MAAM;AAmCZ,eAAeA,MAAM;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}